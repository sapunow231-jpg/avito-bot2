import os
import asyncio
import time
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import Conflict

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 2))
DEFAULT_CITY = os.getenv("DEFAULT_CITY", "samara")
DEFAULT_QUERY = os.getenv("DEFAULT_QUERY", "iphone")

if not TOKEN or not CHAT_ID:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TOKEN –∏ CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env –∏–ª–∏ Render Environment.")

sent_ads = set()
search_city = DEFAULT_CITY
search_query = DEFAULT_QUERY


# === –ü–∞—Ä—Å–µ—Ä Avito ===
def build_search_url(city: str, query: str) -> str:
    query_encoded = "+".join(query.strip().split())
    return f"https://www.avito.ru/{city}/telefony?p=1&q={query_encoded}"


def get_avito_ads() -> list:
    url = build_search_url(search_city, search_query)
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞] {e}")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    ads = []
    for item in soup.select("div[data-marker='item']"):
        title_tag = item.select_one("h3")
        price_tag = item.select_one("span[data-marker='item-price']")
        link_tag = item.select_one("a[href]")
        if not title_tag or not price_tag or not link_tag:
            continue

        title = title_tag.text.strip()
        price = price_tag.text.strip()
        link = "https://www.avito.ru" + link_tag["href"]
        ad_id = link.split("/")[-1]
        ads.append({"id": ad_id, "text": f"{title}\n{price}\n{link}"})
    return ads


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===
async def send_new_ads(app):
    global sent_ads
    ads = get_avito_ads()
    new_ads = [ad for ad in ads if ad["id"] not in sent_ads]

    for ad in new_ads:
        try:
            await app.bot.send_message(chat_id=CHAT_ID, text=ad["text"])
            sent_ads.add(ad["id"])
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏] {e}")

    if new_ads:
        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(new_ads)}")
    else:
        print("[INFO] –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")


async def scheduled_task(app):
    while True:
        await send_new_ads(app)
        await asyncio.sleep(CHECK_INTERVAL * 60)


# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω.\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/city <–≥–æ—Ä–æ–¥> ‚Äî —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n"
        f"/query <–∑–∞–ø—Ä–æ—Å> ‚Äî —Å–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
    )


async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global search_city, sent_ads
    if context.args:
        search_city = context.args[0].lower()
        sent_ads.clear()
        await update.message.reply_text(f"üèô –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {search_city}")
    else:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /city kazan")


async def set_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global search_query, sent_ads
    if context.args:
        search_query = " ".join(context.args).lower()
        sent_ads.clear()
        await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {search_query}")
    else:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /query –Ω–æ—É—Ç–±—É–∫")


# === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ===
async def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("city", set_city))
    app.add_handler(CommandHandler("query", set_query))

    asyncio.create_task(scheduled_task(app))

    while True:
        try:
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            await app.initialize()
            await app.start()
            await app.updater.start_polling()
            await asyncio.Event().wait()
        except Conflict:
            print("[‚ö†Ô∏è] –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë. –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
            await asyncio.sleep(30)
        except Exception as e:
            print(f"[‚ùå –û—à–∏–±–∫–∞] {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫...")
            await asyncio.sleep(15)


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Render / Python 3.13 ===
if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except RuntimeError as e:
        if "close a running event loop" in str(e).lower():
            print("[INFO] –ê–∫—Ç–∏–≤–Ω—ã–π event loop –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
            loop = asyncio.get_event_loop()
            loop.create_task(run_bot())
            loop.run_forever()
        else:
            raise
