import os
import asyncio
import logging
from aiohttp import web
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = int(os.getenv("PORT", 10000))

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Render webhook!")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ ---
async def main():
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        app = ApplicationBuilder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))

        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        logger.info(f"üì° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook: {webhook_url}")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await app.bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)

        # –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π webhook
        await app.bot.set_webhook(webhook_url)
        logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        # –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞ Telegram
        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path="webhook",
            webhook_url=webhook_url,
        )

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await asyncio.sleep(5)
        asyncio.create_task(main())

# --- –ú–∏–Ω–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def ping_server():
    async def handle(request):
        return web.Response(text="‚úÖ Bot is alive!", content_type="text/plain")

    app = web.Application()
    app.router.add_get("/", handle)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"üåê –ü–æ—Ä—Ç {PORT} –æ—Ç–∫—Ä—ã—Ç –¥–ª—è Render")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(ping_server())  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
        loop.create_task(main())         # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        loop.run_forever()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.exception(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
